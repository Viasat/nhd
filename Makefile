#*******************************************************************************
#
# Mach3 NHD Makefile
#
# Makefile:
#
#   Create dependecies, compile and link:
#   "make all"
#
#   Wipe out all backup files, object files, etc:
#   "make distclean"
#
#   NOTE: GNU Tools must be located in the $(GNU) directory.
#         Object Generation Tools (compiler, linker, etc.) must be located
#         in the $(BIN) directory.
#
#   TAB NOTE: Although tabs are ugly, they MUST be present in this file for the
#             GNU make utility to function properly.  They are used for
#             separation of targets and target commmands ONLY.
#
# Programmer:    Tim Martin
# Modified by Cliff Burdick
# Creation Date: November 5 2019
#
#*******************************************************************************

REPO=CHANGEME
OS_FULLPATH=CHANGEME


NHD_VERSION:=$(shell cat nhd-version)
NHD_FULLPATH=$(REPO)nhd:$(NHD_VERSION)

NHD_LATEST_VERSION=latest
NHD_LATEST_FULLPATH=$(REPO)nhd:$(NHD_LATEST_VERSION)

#**********************************************************************
# Preamble stuff - Skip down to Setup Project
#**********************************************************************
ifndef CONFIG
   UNAME := $(shell uname -s)
   ifeq ($(UNAME),Linux)
      CONFIG := LINUX
   endif
   ifeq ($(UNAME),Darwin)
      CONFIG := OSX
   endif
endif

ifndef CONFIG
   $(error Unable to detect operating system, please manually define CONFIG)
endif

# Baseline empty, fill in with += later
PROTO_INCLUDE   =

# Output directories
MAKEROOT        := ./
OBJ             = $(MAKEROOT)obj/
TMP             = $(MAKEROOT)tmp/

#**********************************************************************
# Setup Project
#**********************************************************************

# GPRC compiler

# Source/include directories and setup main target
MAKEFILE         = $(MAKEROOT)Makefile
NHD_SRC         = $(MAKEROOT)nhd/ 
PROTO_SRC        = $(MAKEROOT)proto/
NHD_WHEEL       = dist/NHD-$(NHD_VERSION).tar.gz
TARGET           = $(NHD_WHEEL)

# Docker dependencies can't be autogenerated...
DOCKER_DEPENDS   = deploy/Dockerfile.nhd
DOCKER_DEPENDS  += deploy/requirements.txt

all: $(TARGET)

#**********************************************************************
#
# Shouldn't need to touch anything below here...
#
#**********************************************************************

#**********************************************************************
# Setup Portable Directory Locations
#**********************************************************************

ifeq ($(CONFIG),CYGWIN)
   GNU             = /bin/
   CCBIN           = /usr/bin/
   BIN             = /usr/bin/
endif

ifeq ($(CONFIG),LINUX)
   GNU             = /bin/
   CCBIN           = /usr/bin/
   BIN             = /usr/bin/
endif

ifeq ($(CONFIG),OSX)
   GNU             = /bin/
   CCBIN           = /usr/bin/
   BIN             = /usr/bin/
endif

#**********************************************************************
# Setup Compiler and Binutils
#**********************************************************************

CROSS_COMPILE   =
PROTOC          = @$(PROTO_COMPILER)
PROTOC          = python3 -m grpc_tools.protoc
ECHO            = @$(GNU)echo
CURL            = @$(BIN)curl
RM              = $(GNU)rm -f
MV              = @$(GNU)mv
CP              = @$(GNU)cp
CPP             = @$(GNU)cpp
RMDIR           = -$(GNU)rmdir
MKDEP           = @$(BIN)$(CROSS_COMPILE)g++ -MM -MG -MP
MKDIR           = @$(GNU)mkdir -p
WGET            = @$(BIN)wget
INLINEWGET      = $(BIN)wget

#**********************************************************************
# Setup Compiler and Linker flags
#**********************************************************************

PROTO_INCLUDE  += $(foreach DIR, $(PROTO_SRC), -I $(DIR))

#**********************************************************************
# Setup Targets
#**********************************************************************

# Cleans up mostly object files
EDIT_DIRS = $(PROTO_SRC) $(NHD_SRC) $(MAKEROOT)
clean:
		$(ECHO)
		$(ECHO) Removing backup and temporary files
		$(ECHO)
		$(RM) $(foreach DIR, $(EDIT_DIRS), $(wildcard $(DIR)*.bak))
		$(RM) $(foreach DIR, $(EDIT_DIRS), $(wildcard $(DIR)*.~*))
		$(RM) $(foreach DIR, $(EDIT_DIRS), $(wildcard $(DIR)*.tmp))
		$(RM) $(foreach DIR, $(EDIT_DIRS), $(wildcard $(DIR).*.swp))
		$(ECHO)
		$(ECHO) Removing protobufs/gRPC generated source files
		$(ECHO)
		$(RM) -r $(OBJ)__pycache__
		$(RM) $(wildcard $(OBJ)*)
		$(ECHO)

# Cleans up all temporary files, including object files.
distclean: clean
		$(ECHO)
		$(ECHO) Removing files in TEMP directory
		$(ECHO)
		$(RM) $(wildcard $(TMP)*)
		$(ECHO)
		$(ECHO) Removing build/dist directories
		$(ECHO)
		$(RM) -r build
		$(RM) -r dist
		$(ECHO)
		$(ECHO) Removing makefile generated directories
		$(ECHO)
		$(RM) -r $(TMP)
		$(RM) -r $(OBJ)

#**********************************************************************
# All objects
#**********************************************************************

# GRPC Stuff
FIND_GRPC_PROTO_FILES = $(wildcard $(DIR)*.proto)
GRPC_PROTO_FILES := $(foreach DIR, $(PROTO_SRC), $(FIND_GRPC_PROTO_FILES))
GRPC_PB2_FILES := $(patsubst %.proto, $(OBJ)%_pb2.py, $(notdir $(GRPC_PROTO_FILES)))
GRPC_PB2_GRPC_FILES := $(patsubst %.proto, $(OBJ)%_pb2_grpc.py, $(notdir $(GRPC_PROTO_FILES)))
GRPC_AUTOGEN_FILES := $(GRPC_PB2_FILES) $(GRPC_PB2_GRPC_FILES)

FIND_NHD_FILES = $(wildcard $(DIR)*.py)
NHD_FILES := $(foreach DIR, $(NHD_SRC), $(FIND_NHD_FILES))

#**********************************************************************
# gRPC proto compilation
#**********************************************************************
vpath %.proto $(PROTO_SRC)

$(OBJ)%_pb2.py \
$(OBJ)%_pb2_grpc.py : %.proto $(MAKEFILE) 
		$(ECHO) Processing [$<]
		$(PROTOC) $(PROTO_INCLUDE) --python_out=. -I=. --grpc_python_out=. $<

#**********************************************************************
# NHD Wheel
#**********************************************************************
$(NHD_WHEEL): $(GRPC_AUTOGEN_FILES) $(NHD_FILES) setup_template.py nhd-version bin/nhd
	$(CP) setup_template.py setup.py
	sed -ri "s/.*version=.*/    version=\"$(NHD_VERSION)\",/g" setup.py
	python3 setup.py sdist bdist_wheel

#**********************************************************************
# Makefile file generation
#**********************************************************************

$(TMP)tmpdir.txt:
		$(ECHO) [$@]
		$(MKDIR) $(dir $(TMP))
		$(ECHO) "# This is the Temporary File Directory." > $@

$(OBJ)objdir.txt:
		$(ECHO) [$@]
		$(MKDIR) $(dir $(OBJ))
		$(ECHO) "# This is the OBJ File Directory." > $@

#**********************************************************************
# Object Linking and Target Output
#**********************************************************************

.phony: release
.phony: docker

docker: $(TMP)docker

release: $(TMP)release

$(TMP)docker: $(NHD_WHEEL) $(DOCKER_DEPENDS)
	docker build -f ./deploy/Dockerfile.nhd --build-arg OS_FULLPATH=$(OS_FULLPATH) --build-arg NHD_VERSION=$(NHD_VERSION) -t $(NHD_FULLPATH) ./
	docker push $(NHD_FULLPATH)
	touch $@

$(TMP)release: $(TMP)docker
	docker tag $(NHD_FULLPATH) $(NHD_LATEST_FULLPATH)
	docker push $(NHD_LATEST_FULLPATH)
	touch $@

ifeq (, $(filter $(MAKECMDGOALS), clean distclean))
   # Things to execute if we aren't cleaning/distcleaning
   
   include $(TMP)tmpdir.txt
   include $(OBJ)objdir.txt

   -include $(DEPENDS)
endif

#**********************************************************************
# Help
#**********************************************************************

.phony: help
help:
	$(ECHO) NHD_VERSION         $(NHD_VERSION)
	$(ECHO) EDIT_DIRS:           $(EDIT_DIRS)
	$(ECHO) PROTO_SRC:           $(PROTO_SRC)
	$(ECHO) NHD_SRC:            $(NHD_SRC)
	$(ECHO) GRPC_PROTO_FILES:    $(GRPC_PROTO_FILES)
	$(ECHO) GRPC_AUTOGEN_FILES:  $(GRPC_AUTOGEN_FILES)
	$(ECHO) NHD_FILES:          $(NHD_FILES)
	$(ECHO) NHD_FULLPATH:       $(NHD_FULLPATH)
	$(ECHO) NHD_LATEST_FULLPATH: $(NHD_LATEST_FULLPATH)
	$(ECHO) NHD_VERSION:        $(NHD_VERSION)
