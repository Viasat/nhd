#!/usr/bin/env python3
import logging
import os
import threading
from colorlog import ColoredFormatter
import pkg_resources
import sys
import time
from nhd.NHDCommon import NHDCommon
from nhd.NHDScheduler import NHDScheduler
from nhd.NHDRpcServer import NHDRpcServer
from queue import Queue
from nhd.NHDWatchQueue import qinst
from nhd.TriadController import TriadControllerLoop


if __name__ == "__main__":
    logger = NHDCommon.GetLogger(__name__)
    threads = {}
    q = Queue(maxsize=128)

    # Initialize shared queue
    k8sq = qinst.size()
  

    try:
        ready_flag = threading.Event()
        stop_flag = threading.Event()
        threads['controller'] = threading.Thread(target=TriadControllerLoop, kwargs=dict(
            stop_flag=stop_flag,
            ready_flag=ready_flag,
        ))
             
        threads['scheduler'] = NHDScheduler(q)
        threads['rpc'] = NHDRpcServer(q)

        for t in threads.values():
            t.start()

        logger.info("Running thread loop")

        # Infinite loop while the threads run
        while True:
            killit = False
            if stop_flag.is_set():
                logger.error("Controller thread stopped")
                killit = True
            for k,v in threads.items():
                if not v.is_alive():
                    logger.error(f"Thread {k} stopped running. Exiting application")
                    killit = True
            
            if killit:
                logger.error("Shutting down due to error")
                os._exit(-1)
            
            time.sleep(1)
        
        for t in threads:
            t.join()


    except KeyboardInterrupt:
        logger.warning("Exiting NHD")
        os._exit(1)


